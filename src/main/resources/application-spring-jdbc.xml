<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       ">

    <!--添加组件扫描，@controller等使注解生效-->
    <context:component-scan base-package="com.guangfuxiong.springjdbc"/>
    <!--引入配置文件-->
    <context:property-placeholder location="jdbc.properties"/>
    <!--配置数据源-->
    <bean id="dataSource_spring" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${c3p0.driver}"/>
        <property name="jdbcUrl" value="${c3p0.url.spring}"/>
        <property name="user" value="${c3p0.user}"/>
        <property name="password" value="${c3p0.password}"/>
    </bean>
    <bean id="dataSource_tedu" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${c3p0.driver}"/>
        <property name="jdbcUrl" value="${c3p0.url.tedu}"/>
        <property name="user" value="${c3p0.user}"/>
        <property name="password" value="${c3p0.password}"/>
    </bean>
    <!--配置spring提供的模板类JDBCTemplate,
        该模板类可以把查询的结果集映射成对象保存
    -->
    <bean id="jdbcTemplate_spring" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource_spring"/>
    </bean>
    <bean id="jdbcTemplate_tedu" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource_tedu"/>
    </bean>
    <!--配置spring自带的事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--引入数据源-->
        <property name="dataSource">
            <ref bean="dataSource_spring"/>
        </property>
    </bean>
    <!--配置事务通知
		作用:整个系统中的事务策略
		transaction-manager="transactionManager" 默认引入事务管理器
		如果事务管理器的名称为transactionManager,那么该配置可以省略.
		id:唯一标识通知
	 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--name:表示需要控制的方法名称
				propagation表示事务传播策略  默认的就是REQUIRED
				propagation="REQUIRED" 表示该方法必须添加事务控制.
				propagation="SUPPORTS"  表示事务支持.
				如果原来有事务控制,则共用事务,
				如果原来没有事务控制,就以非事务的状态运行.

				read-only="true"
					1.表示当前方法不能更新数据库.是只读的.
					2.底层有优化策略 提高执行效率
				rollback-for="java.sql.SQLException" 放遇到某些特定的异常时.事务回滚.
				no-rollback-for="java.lang.RuntimeException"  遇到某些异常不回滚
			  -->
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!--配置事务切面-->
    <aop:config>
        <aop:pointcut id="pc" expression="execution(* com.guangfuxiong.springjdbc.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
    </aop:config>
</beans>